var Mongoose = require('../db');
var Schema = Mongoose.Schema;

var schema = new Schema({
	myDeviceType:Number,
	addressName:String,
	myId:String,
	slaveDeviceType:Number,
	hostId:String,
	version:String,
	updateAt:String
});

var DevInfo = Mongoose.InnotekDevFwDb.model('device_infos', schema);

module.exports.setDevInfo = function(info, res)
{
	var json = JSON.parse(info);
	console.log(info);

	if (1 === json.isAdd)
	{
		var devInfo = new DevInfo(json.data);

		DevInfo.findOne({myId:json.data.myId, hostId:json.data.hostId}, function(err, data){

			if (err)
			{
				res.writeHead(404);
				res.write("添加失败");
				res.end();
			}
			else
			{
				if (null !== data)
				{
					res.writeHead(404);
					res.write(json.data.myId + "设备已存在");	
					res.end();
				}
				else
				{
					devInfo.save(function(err){

						if (err)
						{
							res.writeHead(404);
							res.write("添加失败");
						}
						else
						{
							res.writeHead(200);
							res.write("添加成功");			
						}

						res.end();
					});								
				}
			}
		});
	}	
	else
	{
		DevInfo.findOne({myId:json.data.myId, hostId:json.data.hostId}, function(err, data){

			if (err)
			{
				res.writeHead(404);
				res.write("删除失败");
				res.end();
			}
			else
			{
				if (null === data)
				{
					res.writeHead(404);
					res.write(json.data.myId + "设备不存在");	
					res.end();
				}
				else
				{
					DevInfo.remove({myId:json.data.myId, hostId:json.data.hostId}, function(err){

						if (err)
						{
							res.writeHead(404);
							res.write("删除失败");
						}
						else
						{
							res.writeHead(200);
							res.write("删除成功");			
						}

						res.end();
					});								
				}
			}
		});		
	}	
};

module.exports.getDevInfos = function(params, res)
{
	var opt;

	if ('null' === params.slaveDevType)
	{
		opt = {myDeviceType:Number(params.index)};
	}
	else
	{
		opt = {myDeviceType:params.slaveDevType,hostId:params.index};
	}

	DevInfo.find(opt)
	.sort({myId:1})
	.where('myId').gt(params.myId)
	.limit(10)
	.exec(function(err, data){

		res.setHeader('Content-Type', 'application/string');

		if (err)
		{
			console.log("not exist device information");
			res.writeHead(404);
			res.write("[]");	
		}
		else
		{
			console.log(data);
			res.writeHead(200);	
			res.write(JSON.stringify(data));
		}

		res.end();
	});
};

module.exports.updateVersion = function(params){

	DevInfo.findOneAndUpdate({myId:params.myId, hostId:params.hostId}, {version:params.version}, {upsert:true}, function(err, data){

		if (err)
		{
			console.log("update " + params.myId + " version failed");
		}
		else
		{
			console.log("update " + params.myId + " version successful");
		}

	});
};




















